import type { Logger } from 'pino';
import { type AxiosResponse } from 'axios';
import type { ContractAddress } from '@midnight-ntwrk/compact-runtime';
import type { BlockHash } from '@midnight-ntwrk/midnight-js-types/dist/midnight-types';
import { ContractState, LedgerState } from '@midnight-ntwrk/ledger';
/**
 * Client for interacting with a Midnight node's JSON-RPC API
 */
export declare class NodeClient {
    readonly nodeURL: string;
    private logger;
    /**
     * Creates a new NodeClient instance
     * @param {string} nodeURL - URL of the Midnight node
     * @param {Logger} logger - Logger instance for recording operations
     */
    constructor(nodeURL: string, logger: Logger);
    /**
     * Checks the health status of the node.
     * Makes a GET request to the health endpoint of the node.
     * @returns {Promise<AxiosResponse | void>} A promise that resolves to the response of the health check or logs an error if the request fails.
     */
    health(): Promise<void | AxiosResponse<any, any>>;
    /**
     * Validates response format and throws if unexpected
     * @param {AxiosResponse} response - Response from node API
     * @throws {Error} If response format is unexpected
     * @private
     */
    private static throwOnUnexpected;
    /**
     * Makes a JSON-RPC request to the node
     * @param {string} method - RPC method name
     * @param {any[]} params - RPC method parameters
     * @returns {Promise<string>} Response result as string
     * @private
     */
    private jsonRPC;
    /**
     * Fetches the state of a contract
     * @param {ContractAddress} contractAddress - Address of the contract
     * @returns {Promise<ContractState | null>} Contract state or null if not found
     */
    contractState(contractAddress: ContractAddress): Promise<ContractState | null>;
    /**
     * Fetches the ledger state at a given block
     * @param {BlockHash} blockHash - Hash of the block
     * @returns {Promise<LedgerState>} Ledger state
     */
    ledgerState(blockHash: BlockHash): Promise<LedgerState>;
    /**
     * Fetches the raw ledger state blob at a given block
     * @param {BlockHash} blockHash - Hash of the block
     * @returns {Promise<Uint8Array>} Raw ledger state data
     * @throws {Error} If no ledger state is found
     */
    ledgerStateBlob(blockHash: BlockHash): Promise<Uint8Array>;
    /**
     * Fetches the ledger version at a given block
     * @param {BlockHash} blockHash - Hash of the block
     * @returns {Promise<string>} Ledger version
     * @throws {Error} If no ledger version is found
     */
    ledgerVersion(blockHash: BlockHash): Promise<string>;
}
//# sourceMappingURL=node-client.d.ts.map