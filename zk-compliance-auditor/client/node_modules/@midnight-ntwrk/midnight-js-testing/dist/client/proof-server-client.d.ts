import type { Logger } from 'pino';
import { type AxiosRequestConfig } from 'axios';
export declare class ProofServerClient {
    readonly proofServer: string;
    private logger;
    /**
     * Creates an instance of ProofServerClient.
     * @param {string} proofServer - The URL of the proof server service.
     * @param {Logger} logger - The logger instance for logging information.
     */
    constructor(proofServer: string, logger: Logger);
    /**
     * Checks the health status of the indexer service.
     * Makes a GET request to the status endpoint of the indexer service.
     * @returns {Promise<AxiosResponse | void>} A promise that resolves to the response of the health check or logs an error if the request fails.
     */
    health(): Promise<void | import("axios").AxiosResponse<any, any>>;
    /**
     * Proves a transaction by sending a POST request to the proof server.
     * @param data serialized transaction data
     * @param config Axios request configuration
     */
    proveTx(data?: ArrayBuffer, config?: AxiosRequestConfig): Promise<void | import("axios").AxiosResponse<any, any>>;
}
//# sourceMappingURL=proof-server-client.d.ts.map