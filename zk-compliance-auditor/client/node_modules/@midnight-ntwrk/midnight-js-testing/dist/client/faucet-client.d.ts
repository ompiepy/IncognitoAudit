import type { Logger } from 'pino';
/**
 * Client for interacting with the Midnight faucet service.
 * Provides functionality to request test tokens for wallet addresses.
 */
export declare class FaucetClient {
    readonly faucetUrl: string;
    private logger;
    /**
     * Creates a new FaucetClient instance.
     * @param {string} faucetUrl - The URL of the faucet service endpoint
     * @param {Logger} logger - Logger instance for recording operations
     */
    constructor(faucetUrl: string, logger: Logger);
    /**
     * Checks the health status of the faucet service.
     * Makes a GET request to the health endpoint of the faucet service.
     * @returns {Promise<AxiosResponse | void>} A promise that resolves to the response of the health check or logs an error if the request fails
     */
    health(): Promise<void | import("axios").AxiosResponse<any, any>>;
    /**
     * Requests test tokens from the faucet for a specified wallet address.
     * Makes a POST request to the faucet service with the wallet address.
     * @param {string} walletAddress - The address to receive the test tokens
     * @returns {Promise<void>} A promise that resolves when the request is complete
     * @throws Will log but not throw if the request fails
     */
    requestTokens(walletAddress: string): Promise<void>;
}
//# sourceMappingURL=faucet-client.d.ts.map