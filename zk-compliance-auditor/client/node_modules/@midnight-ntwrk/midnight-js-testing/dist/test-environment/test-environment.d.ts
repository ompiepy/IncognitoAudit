import type { Logger } from 'pino';
import type { MidnightWalletProvider } from '../wallet';
import type { EnvironmentConfiguration } from './environment-configuration';
import type { ProofServerContainer } from '../proof-server-container';
/**
 * Abstract base class for test environments.
 * Provides common functionality for managing test wallets and environments.
 */
export declare abstract class TestEnvironment {
    /** Logger instance for recording operations */
    protected readonly logger: Logger;
    /** Unique identifier for this test environment instance */
    protected readonly uid: string;
    /**
     * Creates a new TestEnvironment instance.
     * @param {Logger} logger - Logger instance for recording operations
     */
    constructor(logger: Logger);
    /**
     * Starts a single wallet instance.
     * @returns {Promise<MidnightWalletProvider>} A promise that resolves to the started wallet
     * @throws {Error} If no wallet could be started
     */
    getMidnightWalletProvider: () => Promise<MidnightWalletProvider>;
    /**
     * Shuts down the test environment and cleans up resources.
     * @param {boolean} [saveWalletState] - Optional flag to save the wallet state before shutdown
     * @returns {Promise<void>} A promise that resolves when shutdown is complete
     */
    abstract shutdown(saveWalletState?: boolean): Promise<void>;
    /**
     * Start the test environment.
     *
     * @param maybeProofServerContainer If defined, a container representing an already
     *                                  running proof server. If undefined, a proof server
     *                                  will be started automatically.
     * @returns {Promise<EnvironmentConfiguration>} A promise that resolves to the environment configuration
     */
    abstract start(maybeProofServerContainer?: ProofServerContainer): Promise<EnvironmentConfiguration>;
    /**
     * Starts multiple wallet instances.
     * @param {number} [amount] - Optional number of wallet instances to start
     * @param {string[]} [seeds] - Optional array of seeds for the wallets
     * @returns {Promise<MidnightWalletProvider[]>} A promise that resolves to an array of started wallets
     */
    abstract startMidnightWalletProviders(amount?: number, seeds?: string[]): Promise<MidnightWalletProvider[]>;
}
//# sourceMappingURL=test-environment.d.ts.map