import { type StartedDockerComposeEnvironment } from 'testcontainers';
import type { Logger } from 'pino';
import { MidnightWalletProvider } from '../../wallet';
import type { EnvironmentConfiguration } from '../environment-configuration';
import { TestEnvironment } from '../test-environment';
import type { ProofServerContainer } from '../../proof-server-container';
/**
 * Configuration for component ports in the local test environment
 */
export type ComponentPortsConfiguration = {
    indexer: number;
    node: number;
    proofServer: number;
};
/**
 * Configuration class for local test environment implementing EnvironmentConfiguration
 */
export declare class LocalTestConfiguration implements EnvironmentConfiguration {
    readonly indexer: string;
    readonly indexerWS: string;
    readonly node: string;
    readonly proofServer: string;
    readonly faucet: string | undefined;
    /**
     * Creates a new LocalTestConfiguration instance
     * @param {ComponentPortsConfiguration} ports - Object containing port numbers for each component
     */
    constructor({ indexer, node, proofServer }: ComponentPortsConfiguration);
}
/**
 * Test environment for local development using Docker containers
 * Manages containers for node, indexer and proof server components
 */
export declare class LocalTestEnvironment extends TestEnvironment {
    static readonly MAX_NUMBER_OF_WALLETS = 4;
    readonly genesisMintWalletSeed: string[];
    private config;
    private environmentConfiguration;
    dockerEnv: StartedDockerComposeEnvironment;
    private walletProviders;
    /**
     * Creates a new LocalTestEnvironment instance
     * @param {Logger} logger - Logger instance for recording operations
     */
    constructor(logger: Logger);
    /**
     * Gets the mapped ports for all containers in the environment
     * @returns {ComponentPortsConfiguration} Object containing mapped port numbers
     * @private
     */
    private getMappedPorts;
    /**
     * Instead of starting the test environment by building the docker containers
     * from the default configuration files in this package, start the test environment
     * by passing an existing {@link StartedDockerComposeEnvironment} along with the
     * ports for the containers in the environment.
     *
     * @param {StartedDockerComposeEnvironment} dockerEnv - A started docker compose environment
     * @param {ComponentPortsConfiguration} ports - The ports of the containers in the given environment
     * @returns {Promise<EnvironmentConfiguration>} The environment configuration
     */
    startWithInjectedEnvironment: (dockerEnv: StartedDockerComposeEnvironment, ports: ComponentPortsConfiguration) => Promise<EnvironmentConfiguration>;
    /**
     * Starts the test environment by creating and configuring Docker containers
     * @param {ProofServerContainer} maybeProofServerContainer - Optional proof server container
     * @returns {Promise<EnvironmentConfiguration>} The environment configuration
     * @throws {Error} If trying to inject proof server container when starting new environment
     */
    start: (maybeProofServerContainer?: ProofServerContainer) => Promise<EnvironmentConfiguration>;
    /**
     * Shuts down the test environment, closing walletProviders and stopping containers
     * @returns {Promise<void>}
     */
    shutdown: (saveWalletState?: boolean) => Promise<void>;
    /**
     * Creates and starts the specified number of wallet providers
     * @throws {Error} If requested amount exceeds maximum supported walletProviders
     * @returns {Promise<MidnightWalletProvider[]>} A promise that resolves to an array of started wallets
     */
    startMidnightWalletProviders: (amount?: number, seeds?: string[] | undefined) => Promise<MidnightWalletProvider[]>;
}
//# sourceMappingURL=local-test-environment.d.ts.map