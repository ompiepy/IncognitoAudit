import { type StartedDockerComposeEnvironment } from 'testcontainers';
import type { Logger } from 'pino';
/**
 * Interface representing a proof server container that can be started and stopped.
 */
export interface ProofServerContainer {
    /**
     * Stops the proof server container.
     * @returns {Promise<void>} A promise that resolves when the container is stopped
     */
    stop(): Promise<void>;
    /**
     * Gets the URL where the proof server can be accessed.
     * @returns {string} The URL of the proof server
     */
    getUrl(): string;
}
/**
 * A proof server container that is started and stopped dynamically by the test
 * suite on random port.
 * @implements {ProofServerContainer}
 */
export declare class DynamicProofServerContainer implements ProofServerContainer {
    /** The Docker Compose environment running the container */
    dockerEnv: StartedDockerComposeEnvironment;
    /** Unique identifier for the container instance */
    private uid;
    /** Configuration for the proof server container */
    private config;
    /**
     * Creates a new DynamicProofServerContainer instance.
     * @param {StartedDockerComposeEnvironment} dockerEnv - The started Docker Compose environment
     * @param {string} uid - Unique identifier for the container
     * @private
     */
    private constructor();
    /**
     * Starts a new proof server container.
     * @param {Logger} logger - Logger instance for recording operations
     * @param {string} [maybeUID] - Optional unique identifier for the container
     * @param {string} [maybeNetworkId] - Optional network ID for the container
     * @returns {Promise<DynamicProofServerContainer>} A promise that resolves to the new container instance
     * @static
     */
    static start(logger: Logger, maybeUID?: string, maybeNetworkId?: string): Promise<DynamicProofServerContainer>;
    /**
     * Stops the proof server container.
     * @returns {Promise<void>} A promise that resolves when the container is stopped
     */
    stop(): Promise<void>;
    /**
     * Gets the mapped port number for the container.
     * @returns {number} The mapped port number
     */
    getMappedPort(): number;
    /**
     * Gets the URL where the proof server can be accessed.
     * @returns {string} The URL of the proof server
     */
    getUrl(): string;
}
/**
 * A proof server that is currently running on a specific port.
 * Used for connecting to an existing proof server instance.
 * @implements {ProofServerContainer}
 */
export declare class StaticProofServerContainer implements ProofServerContainer {
    /** The port number where the proof server is running */
    port: number;
    /**
     * Creates a new StaticProofServerContainer instance.
     * @param {number} port - The port number where the proof server is running (default: 6300)
     */
    constructor(port?: number);
    /**
     * Gets the URL where the proof server can be accessed.
     * @returns {string} The URL of the proof server
     */
    getUrl(): string;
    /**
     * No-op stop method since this represents an external proof server.
     * @returns {Promise<void>} A resolved promise
     */
    stop(): Promise<void>;
}
//# sourceMappingURL=proof-server-container.d.ts.map