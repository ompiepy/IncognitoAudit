import { type WaitStrategy } from 'testcontainers';
/**
 * Configuration for a proof server container instance
 */
export interface ProofServerContainerConfiguration {
    /** Directory path where container configuration is located */
    path: string;
    /** Name of the container configuration file */
    fileName: string;
    /** Network endpoint configuration for the container */
    container: ContainerEndpoints;
}
/**
 * Network endpoint configuration for a container
 */
export interface ContainerEndpoints {
    /** Name of the container */
    name: string;
    /** Port number the container listens on */
    port: number;
    /** TestContainers WaitStrategy to use for container start */
    waitStrategy: WaitStrategy;
}
/**
 * Container endpoint configurations for standalone mode services
 */
export interface StandaloneContainerNames {
    /** Proof server container configuration */
    proofServer: ContainerEndpoints;
    /** Blockchain node container configuration */
    node: ContainerEndpoints;
    /** Indexer service container configuration */
    indexer: ContainerEndpoints;
}
/**
 * Configuration for standalone mode containers
 */
export interface StandaloneContainersConfiguration {
    /** Directory path where container configuration is located */
    path: string;
    /** Name of the container configuration file */
    fileName: string;
    /** Container endpoint configurations */
    container: StandaloneContainerNames;
}
/**
 * Configuration for test logging
 */
export interface LogConfiguration {
    /** Directory path where log files will be written */
    path: string;
    /** Name of the log file */
    fileName: string;
    /** Log level (e.g. 'info', 'debug', etc) */
    level: string;
}
/**
 * Top-level configuration for all test containers
 */
export interface ContainersConfiguration {
    /** Proof server container configuration */
    proofServer: ProofServerContainerConfiguration;
    /** Standalone mode containers configuration */
    standalone: StandaloneContainersConfiguration;
    /** Logging configuration */
    log: LogConfiguration;
}
//# sourceMappingURL=configuration-types.d.ts.map