import type { CallTxOptions, DeployContractOptions, DeployTxOptions, FinalizedCallTxData, FinalizedDeployTxData, FinalizedDeployTxDataBase } from '@midnight-ntwrk/midnight-js-contracts';
import { type MidnightProviders, type PrivateStateId, type FinalizedTxData, type Contract, type ImpureCircuitId, type PrivateState } from '@midnight-ntwrk/midnight-js-types';
import type { StateValue } from '@midnight-ntwrk/compact-runtime';
import type { Transaction } from '@midnight-ntwrk/ledger';
export declare const stateValueEqual: (a: StateValue, b: StateValue) => boolean;
export declare const txsEqual: (a: Transaction, b: Transaction) => boolean;
export declare const expectFoundAndDeployedTxPublicDataEqual: <C extends Contract>(deployTxData: FinalizedDeployTxData<C>, foundDeployTxData: FinalizedDeployTxDataBase<C>) => void;
export declare const expectFoundAndDeployedTxPrivateDataEqual: <C extends Contract>(deployTxData: FinalizedDeployTxData<C>, foundDeployTxData: FinalizedDeployTxDataBase<C>) => void;
export declare const expectFoundAndDeployedTxDataEqual: <C extends Contract>(deployTxData: FinalizedDeployTxData<C>, foundDeployTxData: FinalizedDeployTxDataBase<C>) => void;
export declare const expectFoundAndDeployedStatesEqual: <C extends Contract>(providers: MidnightProviders<ImpureCircuitId<C>, PrivateStateId, PrivateState<C> | unknown>, deployTxData: FinalizedDeployTxData<C>, foundDeployTxData: FinalizedDeployTxDataBase<C>, privateStateId?: PrivateStateId, initialPrivateState?: PrivateState<C>) => Promise<void>;
export declare const expectSuccessfulTxData: (finalizedTxData: FinalizedTxData) => void;
export declare const expectSuccessfulDeployTx: <C extends Contract>(providers: MidnightProviders<ImpureCircuitId<C>, PrivateStateId, PrivateState<C> | unknown>, deployTxData: FinalizedDeployTxData<C>, deployTxOptions?: DeployContractOptions<C> | DeployTxOptions<C>) => Promise<void>;
export declare const expectSuccessfulCallTx: <C extends Contract, ICK extends ImpureCircuitId<C>>(providers: MidnightProviders<ImpureCircuitId<C>, PrivateStateId, PrivateState<C> | unknown>, callTxData: FinalizedCallTxData<C, ICK>, callTxOptions?: CallTxOptions<C, ICK>, nextPrivateState?: PrivateState<C>) => Promise<void>;
//# sourceMappingURL=assertions.d.ts.map