import { type Wallet, type WalletState } from '@midnight-ntwrk/wallet-api';
import type { MidnightWallet, TxOutput } from './wallet-types';
import { type EnvironmentConfiguration } from '../test-environment';
/**
 * Gets the initial state of a wallet.
 * @param {MidnightWallet} wallet - The wallet to get the state from
 * @returns {Promise<WalletState>} The initial wallet state
 */
export declare const getInitialState: (wallet: Wallet) => Promise<WalletState>;
/**
 * Waits for the wallet to fully synchronize with the network.
 * @param {Wallet} wallet - The wallet to wait for
 * @param {number} [throttleTime=5000] - Throttle time in milliseconds
 * @returns {Promise<WalletState>} The synchronized wallet state
 */
export declare const waitForFullSync: (wallet: Wallet, throttleTime?: number) => Promise<WalletState>;
/**
 * Waits for the wallet's sync progress to be defined.
 * @param {Wallet} wallet - The wallet to wait for
 * @param {number} [throttleTime=5000] - Throttle time in milliseconds
 * @returns {Promise<WalletState>} The wallet state with defined sync progress
 */
export declare const waitForSyncProgressDefined: (wallet: Wallet, throttleTime?: number) => Promise<WalletState>;
/**
 * Synchronizes the wallet with the network and waits for a non-zero balance.
 * @param {Wallet} wallet - The wallet to synchronize
 * @param {number} [throttleTime=3000] - Throttle time in milliseconds
 * @returns {Promise<bigint>} A promise that resolves to the wallet balance when sync is close enough and balance is non-zero
 */
export declare const syncWallet: (wallet: Wallet, throttleTime?: number) => Promise<bigint>;
/**
 * Waits for funds to be available in the wallet.
 * If a faucet is configured, requests tokens from it.
 * @param {Wallet} wallet - The wallet to check for funds
 * @param {EnvironmentConfiguration} env - Environment configuration containing faucet details
 * @param {boolean} [fundFromFaucet=false] - Whether to request tokens from the faucet
 * @returns {Promise<bigint>} A promise that resolves to the wallet balance
 */
export declare const waitForFunds: (wallet: MidnightWallet, env: EnvironmentConfiguration, fundFromFaucet?: boolean) => Promise<bigint>;
/**
 * Waits for the wallet to have pending coins.
 * @param {Wallet} wallet - The wallet to check for pending coins
 * @param {number} [throttleTime=1000] - Throttle time in milliseconds
 * @returns {Promise<WalletState>} The wallet state with pending coins
 */
export declare const waitForPending: (wallet: Wallet, throttleTime?: number) => Promise<WalletState>;
/**
 * Waits for all pending coins to be finalized.
 * @param {Wallet} wallet - The wallet to check for finalized balance
 * @param {number} [throttleTime=5000] - Throttle time in milliseconds
 * @returns {Promise<WalletState>} The wallet state with no pending coins
 */
export declare const waitForFinalizedBalance: (wallet: Wallet, throttleTime?: number) => Promise<WalletState>;
/**
 * Waits for a specific transaction ID to appear in the wallet's transaction history.
 * @param {string} txId - The transaction ID to wait for
 * @param {Wallet} wallet - The wallet to check
 * @param {number} [delayTime=1000] - Delay time in milliseconds
 * @returns {Promise<void>} Resolves when the transaction is found in history
 */
export declare const waitForTxInHistory: (txId: string, wallet: Wallet, delayTime?: number) => Promise<void>;
/**
 * Returns a wallet state object without transaction history and coin data.
 * @param {WalletState} state - The wallet state to filter
 * @returns {Partial<WalletState>} Filtered wallet state
 */
export declare const walletStateWithoutHistoryAndCoins: (state: WalletState) => Partial<WalletState>;
/**
 * Normalizes a wallet state by removing transaction details and sync progress.
 * @param {WalletState} state - The wallet state to normalize
 * @returns {object} Normalized wallet state
 */
export declare const normalizeWalletState: (state: WalletState) => {
    [key: string]: unknown;
};
/**
 * Compares two wallet states for equality after normalization.
 * @param {WalletState} state1 - First wallet state to compare
 * @param {WalletState} state2 - Second wallet state to compare
 */
export declare const expectStatesEqual: (state1: WalletState, state2: WalletState) => void;
/**
 * Creates transaction outputs for a given address and amount.
 * @param {string} address - The receiver's address
 * @param {bigint} amount - The amount to send
 * @returns {TxOutput[]} Array of transaction outputs
 */
export declare const createOutputs: (address: string, amount: bigint) => TxOutput[];
/**
 * Processes a transaction by proving and submitting it.
 * @param {MidnightWallet} wallet - The wallet to process the transaction with
 * @param {TxOutput[]} outputsToCreate - The outputs to create in the transaction
 * @returns {Promise<string>} The transaction ID
 * @private
 */
export declare const processTransaction: (wallet: MidnightWallet, outputsToCreate: TxOutput[]) => Promise<string>;
/**
 * Validates the final state of a transaction.
 * @param {WalletState} finalState - The final wallet state
 * @param {WalletState} initialState - The initial wallet state
 * @param {bigint} initialBalance - The initial balance
 * @param {bigint} outputValue - The transaction output value
 * @private
 */
export declare const validateFinalState: (finalState: WalletState, initialState: WalletState, initialBalance: bigint, outputValue: bigint) => void;
/**
 * Sends a transaction to a specific address.
 * @param {MidnightWallet} walletWithFunds - The wallet to send funds from
 * @param {string} address - The recipient's address
 * @param {bigint} [outputValue=100_000_000n] - The amount to send
 * @returns {Promise<void>}
 */
export declare const sendTransactionToAddress: (walletWithFunds: MidnightWallet, address: string, outputValue?: bigint) => Promise<void>;
/**
 * Sends a transaction from one wallet to another.
 * @param {MidnightWallet} walletWithFunds - The wallet to send funds from
 * @param {MidnightWallet} destination - The destination wallet
 * @returns {Promise<void>}
 */
export declare const sendTransactionToWallet: (walletWithFunds: MidnightWallet, destination: MidnightWallet) => Promise<void>;
//# sourceMappingURL=wallet-utils.d.ts.map