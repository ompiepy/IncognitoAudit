import type { Logger } from 'pino';
import type { CoinInfo } from '@midnight-ntwrk/ledger';
import { type LogLevel, type Resource } from '@midnight-ntwrk/wallet';
import { type BalancedTransaction, type MidnightProvider, type UnbalancedTransaction, type WalletProvider } from '@midnight-ntwrk/midnight-js-types';
import { type EncPublicKey } from '@midnight-ntwrk/zswap';
import type { CoinPublicKey } from '@midnight-ntwrk/compact-runtime';
import type { EnvironmentConfiguration } from '../test-environment';
import { type MidnightWallet } from './wallet-types';
/**
 * Provider class that implements wallet functionality for the Midnight network.
 * Handles transaction balancing, submission, and wallet state management.
 * @implements {MidnightProvider}
 * @implements {WalletProvider}
 * @implements {Resource}
 */
export declare class MidnightWalletProvider implements MidnightProvider, WalletProvider, Resource {
    logger: Logger;
    readonly env: EnvironmentConfiguration;
    readonly wallet: MidnightWallet;
    readonly coinPublicKey: CoinPublicKey;
    readonly encryptionPublicKey: EncPublicKey;
    /**
     * Creates a new MidnightWalletProvider instance.
     * @param {Logger} logger - Logger instance for recording operations
     * @param {EnvironmentConfiguration} environmentConfiguration - Configuration for the wallet environment
     * @param {MidnightWallet} wallet - Wallet instance
     * @param {CoinPublicKey} coinPublicKey - Public key for the wallet's coins
     * @private
     */
    private constructor();
    /**
     * Balances an unbalanced transaction by adding necessary inputs and change outputs.
     * @param {UnbalancedTransaction} tx - The unbalanced transaction to balance
     * @param {CoinInfo[]} newCoins - Array of new coins to include in the transaction
     * @returns {Promise<BalancedTransaction>} A promise that resolves to the balanced transaction
     */
    balanceTx(tx: UnbalancedTransaction, newCoins: CoinInfo[]): Promise<BalancedTransaction>;
    /**
     * Submits a balanced transaction to the network.
     * @param {BalancedTransaction} tx - The balanced transaction to submit
     * @returns {Promise<string>} A promise that resolves to the transaction hash
     */
    submitTx(tx: BalancedTransaction): Promise<string>;
    /**
     * Starts the wallet and optionally waits for funds to be available.
     * @param {boolean} waitForFundsInWallet - Whether to wait for funds to be available (default: true)
     * @returns {Promise<void>} A promise that resolves when the wallet is started and funds are available if requested
     */
    start(waitForFundsInWallet?: boolean): Promise<void>;
    /**
     * Closes the wallet and releases resources.
     * @returns {Promise<void>} A promise that resolves when the wallet is closed
     */
    close(): Promise<void>;
    /**
     * Creates a new MidnightWalletProvider instance.
     * @param {Logger} logger - Logger instance for recording operations
     * @param {EnvironmentConfiguration} env - Configuration for the wallet environment
     * @param {string} [seed] - Optional seed for wallet generation. If not provided, a new random wallet will be created
     * @param {string} [walletLogLevel='info'] - Optional log level for wallet operations
     * @returns {Promise<MidnightWalletProvider>} A promise that resolves to the new wallet provider
     * @static
     */
    static build(logger: Logger, env: EnvironmentConfiguration, seed?: string | undefined, walletLogLevel?: LogLevel): Promise<MidnightWalletProvider>;
    /**
     * Creates a new MidnightWalletProvider instance using an existing wallet.
     * @param {Logger} logger - Logger instance for recording operations
     * @param {EnvironmentConfiguration} env - Configuration for the wallet environment
     * @param {MidnightWallet} wallet - Existing wallet instance to use
     * @returns {Promise<MidnightWalletProvider>} A promise that resolves to the new wallet provider using the existing wallet
     * @static
     */
    static withWallet(logger: Logger, env: EnvironmentConfiguration, wallet: MidnightWallet): Promise<MidnightWalletProvider>;
}
//# sourceMappingURL=midnight-wallet-provider.d.ts.map