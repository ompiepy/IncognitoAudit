import { type Logger } from 'pino';
import { type Wallet } from '@midnight-ntwrk/wallet-api';
/** Default directory path for storing wallet state files */
export declare const DEFAULT_WALLET_STATE_DIRECTORY = "./.states";
/**
 * Generates a filename for the wallet state file based on environment and optional seed
 * @returns {string} Generated filename for the wallet state
 * @param seed
 */
export declare const getWalletStateFilename: (seed: string | undefined) => string;
/**
 * Provider class for saving and loading wallet state to/from compressed files
 */
export declare class WalletSaveStateProvider {
    /** Logger instance for recording operations */
    logger: Logger;
    /** Absolute path to the directory containing wallet state files */
    directoryPath: string;
    /** Full path including filename for the wallet state file */
    filePath: string;
    /**
     * Creates a new WalletSaveStateProvider instance
     * @param {Logger} logger - Logger instance for recording operations
     * @param seed
     * @param {string} [directoryPath=DEFAULT_WALLET_STATE_DIRECTORY] - Directory path for wallet state files
     * @param {string} [filename] - Filename for the wallet state file
     */
    constructor(logger: Logger, seed: string, directoryPath?: string, filename?: string);
    /**
     * Saves the wallet state to a compressed file
     * @param {Wallet} wallet - The wallet instance to save state from
     * @returns {Promise<void>} A promise that resolves when the save is complete
     */
    save(wallet: Wallet): Promise<void>;
    /**
     * Loads and decompresses the wallet state from a file
     * @returns {Promise<string>} A promise that resolves with the decompressed wallet state as a string
     * @throws {Error} If there is an error reading or decompressing the file
     */
    load(): Promise<string>;
}
//# sourceMappingURL=wallet-state-provider.d.ts.map