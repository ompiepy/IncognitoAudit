import { type LogLevel } from '@midnight-ntwrk/wallet';
import type { EnvironmentConfiguration } from '../test-environment';
import type { MidnightWallet } from './wallet-types';
export declare const DEFAULT_WALLET_LOG_LEVEL: LogLevel;
export declare class WalletFactory {
    /**
     * Builds a wallet instance based on the provided environment configuration and optional seed.
     * @param {EnvironmentConfiguration} env - Configuration for the wallet environment
     * @param {string} [seed] - Optional seed for wallet generation. If not provided, a new random wallet will be created
     * @param {LogLevel} [walletLogLevel] - Optional log level for wallet operations
     * @returns {Promise<Wallet>} A promise that resolves to the new wallet instance
     */
    static buildFromEnvContext: (env: EnvironmentConfiguration, seed?: string, walletLogLevel?: LogLevel) => Promise<MidnightWallet>;
    /**
     * Builds a wallet instance based on the provided environment configuration.
     * @param {EnvironmentConfiguration} env - Configuration for the wallet environment
     * @param {LogLevel} [walletLogLevel=DEFAULT_WALLET_LOG_LEVEL] - Optional log level for wallet operations
     * @returns {Promise<MidnightWallet>} A promise that resolves to the new wallet instance
     */
    static build: (env: EnvironmentConfiguration, walletLogLevel?: LogLevel) => Promise<MidnightWallet>;
    /**
     * Builds a wallet instance from a seed based on the provided environment configuration.
     * @param {EnvironmentConfiguration} env - Configuration for the wallet environment
     * @param {string} seed - Seed for wallet generation
     * @param {LogLevel} [walletLogLevel=DEFAULT_WALLET_LOG_LEVEL] - Optional log level for wallet operations
     * @returns {Promise<MidnightWallet>} A promise that resolves to the new wallet instance
     */
    static buildFromSeed: (env: EnvironmentConfiguration, seed: string, walletLogLevel?: LogLevel) => Promise<MidnightWallet>;
    /**
     * Restores a wallet instance from a serialized state based on the provided environment configuration.
     * @param {EnvironmentConfiguration} env - Configuration for the wallet environment
     * @param {string} serialized - Serialized wallet state
     * @param {boolean} [trimTxHistory=true] - Optional flag to trim the transaction history during restoration
     * @param {LogLevel} [walletLogLevel=DEFAULT_WALLET_LOG_LEVEL] - Optional log level for wallet operations
     * @returns {Promise<MidnightWallet>} A promise that resolves to the restored wallet instance
     */
    static restore: (env: EnvironmentConfiguration, serialized: string, seed: string, trimTxHistory?: boolean, walletLogLevel?: LogLevel) => Promise<MidnightWallet>;
    /**
     * Builds a wallet from a seed and attempts to restore its state from a saved file if available.
     * @param {EnvironmentConfiguration} env - Configuration containing indexer, node, and proof server details
     * @param {string} seed - The seed to build the wallet from
     * @param {string} [directoryPath=DEFAULT_WALLET_STATE_DIRECTORY] - Directory path for wallet state file
     * @param {string} [filename=getWalletStateFilename()] - Filename for wallet state file
     * @param {LogLevel} [walletLogLevel='info'] - Log level for wallet operations
     * @returns {Promise<MidnightWallet>} The built and initialized wallet
     */
    static buildFromSeedAndTryToRestoreState: (env: EnvironmentConfiguration, seed: string, directoryPath?: string, filename?: string, walletLogLevel?: LogLevel) => Promise<MidnightWallet>;
}
//# sourceMappingURL=wallet-factory.d.ts.map