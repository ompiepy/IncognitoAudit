import { type MidnightProviders, type PrivateStateId } from '@midnight-ntwrk/midnight-js-types';
import { type EnvironmentConfiguration } from '../test-environment';
import { type MidnightWalletProvider } from '../wallet';
import { type ContractConfiguration } from './contract-types';
/**
 * Configures and returns the required providers for a Midnight contract.
 *
 * @template ICK - Type parameter for the input circuit key string
 * @template PS - Type parameter for the private state
 *
 * @param {MidnightWalletProvider} midnightWalletProvider - The midnightWalletProvider provider instance to use for transactions
 * @param {EnvironmentConfiguration} environmentConfiguration - Configuration for the environment including indexer and proof server details
 * @param {ContractConfiguration} contractConfiguration - Configuration specific to the contract including storage names and ZK config path
 *
 * @returns {MidnightProviders} An object containing all configured providers:
 *   - privateStateProvider: For managing private contract state
 *   - publicDataProvider: For accessing public blockchain data
 *   - zkConfigProvider: For zero-knowledge proof configurations
 *   - proofProvider: For generating and verifying proofs
 *   - walletProvider: For midnightWalletProvider operations
 *   - midnightProvider: For Midnight-specific operations
 */
export declare const initializeMidnightProviders: <ICK extends string, PS>(midnightWalletProvider: MidnightWalletProvider, environmentConfiguration: EnvironmentConfiguration, contractConfiguration: ContractConfiguration) => MidnightProviders<ICK, PrivateStateId, PS>;
//# sourceMappingURL=providers.d.ts.map